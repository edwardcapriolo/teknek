{
  "packageName" : "io.teknek",
  "bundleName" : "itests",
  "feedDescList" : [ {
    "spec" : "groovy",
    "script" : "import io.teknek.feed.*\nimport io.teknek.model.*\npublic class GTry extends Feed { \npublic static final String NUMBER_OF_PARTITIONS = \"number.of.partitions\"; \npublic static final String NUMBER_OF_ROWS = \"number.of.rows\"; \nprotected int numberOfPartitions; \nprotected int numberOfRows; \npublic GTry(Map<String,Object> properties){ \n  super(properties);\n}\n public List<FeedPartition> getFeedPartitions() { \n   numberOfPartitions = ((Number) super.properties.get(NUMBER_OF_PARTITIONS)).intValue(); \n   numberOfRows = ((Number) super.properties.get(NUMBER_OF_ROWS)).intValue(); \n   List<FeedPartition> res = new ArrayList<FeedPartition>();\n   for (int i = 0; i < numberOfPartitions; i++) \n     res.add(new GTryPartition(this, String.valueOf(i))); \n   return res; \n  } \n  public Map<String, String> getSuggestedBindParams() { \n    return new HashMap<String, String>(); \n  } \n} \nclass GTryPartition extends FeedPartitionAdapter { \n  private int current = 0; \n  private int max = 10; \n  public GTryPartition(Feed f, String partitionId) { \n    super(f , partitionId); \n    if (f.getProperties().get(GTry.NUMBER_OF_ROWS)!=null){ \n      max = Integer.parseInt( f.getProperties().get(GTry.NUMBER_OF_ROWS).toString() ); \n    } \n  } \n  @Override \n  public boolean next(ITuple t) { \n    t.setField(\"x\", new Integer(current)); \n    return current++ < max; \n  } \n} \n",
    "theClass" : "GTry",
    "properties" : {
      "number.of.partitions" : 5,
      "number.of.rows" : 1000
    },
    "name" : "GTry"
  } ],
  "operatorList" : [ {
    "spec" : "groovyclosure",
    "script" : "{ tuple, collector ->  collector.emit(tuple) ; println(tuple) }",
    "theClass" : "groovy_identity",
    "name" : "groovy_identity",
    "parameters" : { },
    "children" : [ ]
  } ]
}
